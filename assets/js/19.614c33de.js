(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{397:function(t,n,_){"use strict";_.r(n);var v={},e=_(45),r=Object(e.a)(v,(function(){var t=this,n=t.$createElement,_=t._self._c||n;return _("div",[_("Content",{attrs:{"slot-key":"largest-rectangle"}}),t._v(" "),_("h4",[t._v("\n    给定 n 个非负整数，用来表示柱状图中各个柱子的高度。每个柱子彼此相邻，且宽度为 1 。\n    求在该柱状图中，能够勾勒出来的矩形的最大面积。\n  ")]),t._v(" "),_("p",[t._v("方法：栈")]),t._v(" "),t._m(0),t._v(" "),_("p",[t._v("边界情况分析")]),t._v(" "),t._m(1),t._v(" "),_("Content",{attrs:{"slot-key":"largest-rectangle1"}}),t._v(" "),_("Content",{attrs:{"slot-key":"sliding-window"}}),t._v(" "),_("h4",[t._v("\n    给定一个数组 nums，有一个大小为 k 的滑动窗口从数组的最左侧移动到数组的最右侧。你只可以看到在滑动窗口内的 k 个数字。滑动窗口每次只向右移动一位。\n    返回滑动窗口中的最大值。\n  ")]),t._v(" "),_("p",[t._v("方法1：暴力法")]),t._v(" "),_("Content",{attrs:{"slot-key":"sliding-window1"}}),t._v(" "),_("p",[t._v("方法二：滑动窗口+双端队列，时间复杂度：O(N)每个元素被处理两次- 其索引被添加到双向队列中和被双向队列删除")]),t._v(" "),_("Content",{attrs:{"slot-key":"sliding-window2"}}),t._v(" "),_("p",[t._v("方法1：动态规划")]),t._v(" "),_("Content",{attrs:{"slot-key":"sliding-window3"}}),t._v(" "),_("Content",{attrs:{"slot-key":"trapping-rain"}}),t._v(" "),_("h4",[t._v("给定 n 个非负整数表示每个宽度为 1 的柱子的高度图，计算按此排列的柱子，下雨之后能接多少雨水。")]),t._v(" "),_("Content",{attrs:{"slot-key":"trapping-rain1"}})],1)}),[function(){var t=this,n=t.$createElement,_=t._self._c||n;return _("ul",[_("li",[t._v("维护一个 stack 栈。遍历 heights 数组的每一个 bar")]),t._v(" "),_("li",[t._v("当前 bar 比栈顶的 bar 高，直接入栈")]),t._v(" "),_("li",[t._v("当前 bar 比栈顶的 bar 矮：")]),t._v(" "),_("ul",[_("li",[t._v("栈顶元素（索引）出栈，暂存给 stackTopIndex 变量")]),t._v(" "),_("li",[t._v("计算以 heights[stackTopIndex] 为高的长方形的面积，宽度 = 当前 bar 的索引 i - 新的栈顶索引 - 1 ，与全局的最大比较")])]),t._v(" "),_("li",[t._v("当前 bar 继续和新的栈顶比较，重复上面过程，直到当前 bar 不再比栈顶的 bar 矮，入栈")])])},function(){var t=this,n=t.$createElement,_=t._self._c||n;return _("ul",[_("li",[t._v("求长方形的宽度，需要新的栈顶，如果没有呢？当栈只有一个元素，栈顶出栈，栈就空了")]),t._v(" "),_("li",[t._v("我们再思考另一个问题：让 heights 数组的索引 0 入栈，依据是什么？")]),t._v(" "),_("li",[t._v("入栈的依据是当前 bar 比栈顶 bar 高。问题是现在没有栈顶可以比较")]),t._v(" "),_("li",[t._v("我们可以设立一个高为 0 的虚拟 bar ，放在 heights 的 0 位置，它不影响结果，却可以让第一条 bar 的索引，名正言顺地入栈")]),t._v(" "),_("li",[t._v("同时解决了第一个问题：不会有别的 bar 比它更矮了，因此该 bar 永不出栈")]),t._v(" "),_("li",[t._v("最后一个 bar 不会遇到新 bar 了，如果它在栈中，那就没有机会出栈了，意味着，没有机会计算栈中的长方形面积了")]),t._v(" "),_("li",[t._v("我们设立一个虚拟的高为 0 的 bar，放在 heights 数组的最右，栈中的 bar 都比它高，能一一出栈，得到解救")])])}],!1,null,"46f9f11c",null);n.default=r.exports}}]);
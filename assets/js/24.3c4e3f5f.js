(window.webpackJsonp=window.webpackJsonp||[]).push([[24],{403:function(e,t,n){"use strict";n.r(t);var s={},i=n(45),r=Object(i.a)(s,(function(){var e=this.$createElement,t=this._self._c||e;return t("div",[t("Content",{attrs:{"slot-key":"title-standard"}}),this._v(" "),this._m(0),this._v(" "),t("Content",{attrs:{"slot-key":"title-index"}}),this._v(" "),t("Content",{attrs:{"slot-key":"code-method1"}})],1)}),[function(){var e=this,t=e.$createElement,n=e._self._c||t;return n("ul",[n("li",[e._v("\n      只有一个then方法，没有catch，race，all等方法，甚至没有构造函数\n      "),n("p",[e._v("Promise标准中仅指定了Promise对象的then方法的行为，其它一切我们常见的方法/函数都并没有指定，包括catch，race，all等常用方法，甚至也没有指定该如何构造出一个Promise对象，另外then也没有一般实现中（Q, $q等）所支持的第三个参数，一般称onProgress")])]),e._v(" "),n("li",[e._v("\n      then方法返回一个新的Promise\n      "),n("p",[e._v("Promise的then方法返回一个新的Promise，而不是返回this，此处在下文会有更多解释")])]),e._v(" "),n("li",[e._v("不同Promise的实现需要可以相互调用(interoperable)")]),e._v(" "),n("li",[e._v("Promise的初始状态为pending，它可以由此状态转换为fulfilled（本文为了一致把此状态叫做resolved）或者rejected，一旦状态确定，就不可以再次转换为其它状态，状态确定的过程称为settle")])])}],!1,null,"f0d0a7d8",null);t.default=r.exports}}]);
(window.webpackJsonp=window.webpackJsonp||[]).push([[25],{404:function(t,e,s){"use strict";s.r(e);var i={},n=s(45),_=Object(n.a)(i,(function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("div",[s("Content",{attrs:{"slot-key":"title1"}}),t._v(" "),s("p",[t._v("\n    Node.js是一个基于 Chrome V8\n    引擎的JavaScript运行环境(runtime),Node不是一门语言是让js运行在后端的运行时,并且不包括javascript全集,因为在服务端中不包含DOM和BOM,Node也提供了一些新的模块例如http,fs模块等。Node.js\n    使用了事件驱动、非阻塞式 I/O 的模型，使其轻量又高效并且Node.js 的包管理器\n    npm，是全球最大的开源库生态系统。\n  ")]),t._v(" "),s("Content",{attrs:{"slot-key":"title2"}}),t._v(" "),s("p",[t._v("Node在处理高并发,I/O密集场景有明显的性能优势")]),t._v(" "),t._m(0),t._v(" "),t._m(1),t._v(" "),s("Content",{attrs:{"slot-key":"title3"}}),t._v(" "),s("p",[t._v("\n    javascript在最初设计时设计成了单线程,为什么不是多线程呢？如果多个线程同时操作DOM那岂不会很混乱？这里所谓的单线程指的是主线程是单线程的,所以在Node中主线程依旧是单线程的。\n  ")]),t._v(" "),t._m(2),t._v(" "),s("Content",{attrs:{"slot-key":"title4"}}),t._v(" "),s("img",{attrs:{src:t.$withBase("/node/base1.png")}}),t._v(" "),s("Content",{attrs:{"slot-key":"title5"}}),t._v(" "),s("img",{attrs:{src:t.$withBase("/node/base2.png")}}),t._v(" "),t._m(3),t._v(" "),s("Content",{attrs:{"slot-key":"code1"}}),t._v(" "),t._m(4),t._v(" "),t._m(5),t._v(" "),s("Content",{attrs:{"slot-key":"title6"}}),t._v(" "),t._m(6),t._v(" "),s("Content",{attrs:{"slot-key":"title7"}}),t._v(" "),t._m(7)],1)}),[function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("高并发,是指在同一时间并发访问服务器")]),this._v(" "),e("li",[this._v("\n      I/O密集指的是文件操作、网络操作、数据库,相对的有CPU密集,CPU密集指的是逻辑处理运算、压缩、解压、加密、解密\n    ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("\n      Web主要场景就是接收客户端的请求读取静态资源和渲染界面,所以Node非常适合Web应用的开发。\n    ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("单线程特点是节约了内存,并且不需要在切换执行上下文")]),this._v(" "),e("li",[this._v("而且单线程不需要管锁的问题.")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("我们写的js代码会交给v8引擎进行处理")]),this._v(" "),e("li",[this._v("代码中可能会调用nodeApi,node会交给libuv库处理")]),this._v(" "),e("li",[this._v("libuv通过阻塞i/o和多线程实现了异步io")]),this._v(" "),e("li",[this._v("通过事件驱动的方式,将结果放到事件队列中,最终交给我们的应用。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("\n      这里每一个阶段都对应一个事件队列,当event\n      loop执行到某个阶段时会将当前阶段对应的队列依次执行。当该队列已用尽或达到回调限制，事件循环将移动到下一阶段\n    ")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("blockquote",[e("p",[this._v("process.nextTick() 从技术上讲不是事件循环的一部分")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("Buffer")]),t._v(" "),s("li",[t._v("\n      process\n      "),s("ul",[s("li",[t._v("process.platform:当前进程运行的系统环境")]),t._v(" "),s("li",[t._v("\n          process.argv:\n          当前进程执行时所带的参数（默认数组类型，前两个参数是固定的[当前node的执行命令文件，当前执行的文件，]）\n        ")]),t._v(" "),s("li",[t._v("process.cwd:当前进程执行时的工作目录")]),t._v(" "),s("li",[t._v("process.env:当前进程的环境变量")]),t._v(" "),s("li",[t._v("process.nextTick:node中实现的微任务，优先级比promise高")])])]),t._v(" "),s("li",[t._v("setInterval,setTimeout,setImmediate")]),t._v(" "),s("li",[t._v("console")]),t._v(" "),s("li",[t._v("queueMicrotask")])])},function(){var t=this,e=t.$createElement,s=t._self._c||e;return s("ul",[s("li",[t._v("__dirname")]),t._v(" "),s("li",[t._v("__filename")]),t._v(" "),s("li",[t._v("exports")]),t._v(" "),s("li",[t._v("module")]),t._v(" "),s("li",[t._v("require()")])])}],!1,null,"639caa64",null);e.default=_.exports}}]);
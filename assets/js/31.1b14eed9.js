(window.webpackJsonp=window.webpackJsonp||[]).push([[31],{408:function(t,e,n){"use strict";n.r(e);var v={},_=n(45),s=Object(_.a)(v,(function(){var t=this,e=t.$createElement,n=t._self._c||e;return n("div",[n("Content",{attrs:{"slot-key":"title-communication"}}),t._v(" "),n("h4",[t._v("组件间通信常用方式")]),t._v(" "),n("ul",[n("li",[t._v("\n      props\n      "),n("p",[t._v("父组件给子组件传值")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-props"}})],1),t._v(" "),n("li",[t._v("\n      event\n      "),n("p",[t._v("子组件给父组件传值")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-event"}})],1),t._v(" "),t._m(0),t._v(" "),t._m(1)]),t._v(" "),n("h4",[t._v("边界情况")]),t._v(" "),n("ul",[n("li",[t._v("\n      $parent\n      "),n("p",[t._v("兄弟组件之间通信可通过共同祖辈搭桥，$parent或$root。")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-parent"}})],1),t._v(" "),n("li",[t._v("\n      $children\n      "),n("p",[t._v("⽗组件可以通过$children访问⼦组件实现⽗⼦通信。")]),t._v(" "),n("h5",[t._v("注意：$children不能保证⼦元素顺序")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-children"}})],1),t._v(" "),n("li",[t._v("$root")]),t._v(" "),n("li",[t._v("\n      $refs\n      "),n("p",[t._v("获取⼦节点引⽤")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-refs"}})],1),t._v(" "),n("li",[t._v("\n      provide/inject\n      "),n("p",[t._v("能够实现祖先和后代之间传值,父组件或者不管多深的组件都可以获取")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-provide"}})],1)]),t._v(" "),n("h4",[t._v("⾮prop特性")]),t._v(" "),t._m(2),t._v(" "),n("p",[t._v('\n    包含了⽗作⽤域中不作为 prop 被识别 (且获取) 的特性绑定 ( class 和 style 除外)。当⼀个组件没有\n    声明任何 prop 时，这⾥会包含所有⽗作⽤域的绑定 ( class 和 style 除外)，并且可以通过 v-\n    bind="$attrs" 传⼊内部组件——在创建⾼级别的组件时⾮常有⽤。\n  ')]),t._v(" "),n("Content",{attrs:{"slot-key":"code-attr"}}),t._v(" "),n("h4",[t._v("插槽")]),t._v(" "),n("p",[t._v("插槽语法是Vue 实现的内容分发 API，⽤于复合组件开发。该技术在通⽤组件库开发中有⼤量应⽤。")]),t._v(" "),n("ul",[n("li",[t._v("\n      匿名插槽\n      "),n("Content",{attrs:{"slot-key":"code-slot1"}})],1),t._v(" "),n("li",[t._v("\n      具名插槽\n      "),n("p",[t._v("将内容分发到⼦组件指定位置")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-slot2"}})],1),t._v(" "),n("li",[t._v("\n      作用域插槽\n      "),n("p",[t._v("分发内容要⽤到⼦组件中的数据")]),t._v(" "),n("Content",{attrs:{"slot-key":"code-slot3"}})],1)])],1)}),[function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("\n      vuex\n      "),e("p",[this._v("创建唯⼀的全局数据管理者store，通过它管理数据并通知组件状态变更。")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("li",[this._v("\n      EventBus\n      "),e("p",[this._v("事件总线：任意两个组件之间传值常⽤事件总线 或 vuex的⽅式。（如果你在某一个页面刷新了之后，与之相关的EventBus会被移除，这样就导致业务走不下去。还要就是如果业务有反复操作的页面，EventBus 在监听的时候就会触发很多次，也是一个非常大的隐患。这时候我们就需要好好处理 EventBus 在项目中的关系。通常会用到，在vue页面销毁时，同时移除EventBus 事件监听）")])])},function(){var t=this.$createElement,e=this._self._c||t;return e("ul",[e("li",[this._v("$attrs")]),this._v(" "),e("li",[this._v("$listeners")])])}],!1,null,"6691f87e",null);e.default=s.exports}}]);